package day02;

/*
    位运算符：对数据的二级制形式进行运算
        | & ^ ~ << >> >>>
*/

public class WeiDemo1 {
    public static void main(String[] args) {
        int a = 3;
        int b = 4;

        System.out.println(a|b);    // 7
        System.out.println(a&b);    // 0
        System.out.println(a^b);    // 7
        System.out.println(~a);     // -4

        System.out.println(4<<3);   // 32
        System.out.println(24>>3);   // 3
        System.out.println(-24>>3);  // -3
        System.out.println(24>>>3);  // 3
        System.out.println(-24>>>3); // 536870909
//      System.out.println(01100000000000000000000000000011);
        System.out.println(2^30+2^29+3);  // 536870909
    }
}
/*
*     3     00000000 00000000 00000000 00000011
*
*     4     00000000 00000000 00000000 00000100
*
*    3|4    00000000 00000000 00000000 00000111 --->    7
*
*    3&4    00000000 00000000 00000000 00000000 --->    0
*
*    3^4    00000000 00000000 00000000 00000111 --->    7
*
*   ~3 补码  11111111 11111111 11111111 11111100
*      反码  11111111 11111111 11111111 11111011
*      原码  10000000 00000000 00000000 00000100 --->    -4
 * */

//    << 左移 ：将补码整体向左移动若干位，多出的舍弃，缺失的用0补齐
//        System.out.println(4<<3);   // 4 * 2^3

//      4       00000000 00000000 00000000 00000100
//              00000000 00000000 00000000 00100000 --->    32
//
//      >> 右移 ：将补码整体向右移动若干位，若符号位是1则用1补齐，是0就用0补齐
//        System.out.println(24>>3);   // 3
//      24      00000000 00000000 00000000 00011000
//              00000000 00000000 00000000 00000011 --->    3
//        System.out.println(-24>>3);  // -3
//      -24的原码     10000000 00000000 00000000 00011000
//      -24的反码     11111111 11111111 11111111 11100111
//      -24的补码     11111111 11111111 11111111 11101000
//      向右平移3位    11111111 11111111 11111111 11111101
//                   11111111 11111111 11111111 11111100
//                   10000000 00000000 00000000 00000011 --->   -3
//
//      >>> 无符号右移： 将补码整体向右移动若干位，右边多出来的丢掉，左边无论最高位是1还是0都用0补齐
//        System.out.println(24>>>3);  // 3
//        System.out.println(-24>>>3); // 536870909
////      -24的原码     10000000 00000000 00000000 00011000
////      -24的反码     11111111 11111111 11111111 11100111
////      -24的补码     11111111 11111111 11111111 11101000
//                     00011111 11111111 11111111 11111101
//                     00011111 11111111 11111111 11111100
//                     01100000 00000000 00000000 00000011

//      请用最有效率的方式写出计算2乘以8的结果
//        System.out.println(2<<3);
